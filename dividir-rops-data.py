#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Divide rops-data.js em arquivos menores para resolver problema de carregamento
"""

import re

def split_rops_data():
    print("üîÑ DIVIDINDO rops-data.js (6.8MB) em arquivos menores...")
    print("=" * 70)
    
    # Ler arquivo original
    with open('rops-data.js', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Encontrar in√≠cio e fim do objeto ropsData
    start_pattern = r'const ropsData = \{'
    end_pattern = r'\};'
    
    start_match = re.search(start_pattern, content)
    if not start_match:
        print("‚ùå N√£o encontrou in√≠cio do ropsData")
        return
    
    # Encontrar cada macro √°rea
    macro_areas = [
        ('cultura-seguranca', 'MACRO √ÅREA 1 - CULTURA DE SEGURAN√áA'),
        ('comunicacao', 'MACRO √ÅREA 2 - COMUNICA√á√ÉO'),
        ('uso-medicamentos', 'MACRO √ÅREA 3 - USO DE MEDICAMENTOS'),
        ('vida-profissional', 'MACRO √ÅREA 4 - VIDA PROFISSIONAL'),
        ('prevencao-infeccoes', 'MACRO √ÅREA 5 - PREVEN√á√ÉO DE INFEC√á√ïES'),
        ('avaliacao-riscos', 'MACRO √ÅREA 6 - AVALIA√á√ÉO DE RISCOS')
    ]
    
    # Criar arquivo base
    base_content = '''// ROPs - Pr√°ticas Organizacionais Obrigat√≥rias
// Arquivo base - carrega dados dinamicamente

const ropsData = {};

// Carregar dados das macro √°reas
async function loadROPsData() {
    try {
        // Carregar cada macro √°rea
        const responses = await Promise.all([
            fetch('/anest-app/rops-cultura.js').then(r => r.text()),
            fetch('/anest-app/rops-comunicacao.js').then(r => r.text()),
            fetch('/anest-app/rops-medicamentos.js').then(r => r.text()),
            fetch('/anest-app/rops-vida-profissional.js').then(r => r.text()),
            fetch('/anest-app/rops-infeccoes.js').then(r => r.text()),
            fetch('/anest-app/rops-riscos.js').then(r => r.text())
        ]);
        
        // Executar cada script
        responses.forEach(script => {
            eval(script);
        });
        
        console.log('‚úÖ Dados ROPs carregados:', Object.keys(ropsData));
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar dados ROPs:', error);
        // Fallback: carregar dados b√°sicos
        loadBasicROPsData();
    }
}

// Dados b√°sicos (fallback)
function loadBasicROPsData() {
    ropsData['cultura-seguranca'] = {
        title: "Cultura de Seguran√ßa",
        icon: "fas fa-shield-alt",
        color: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
        subdivisoes: {
            "rop-1-1": {
                title: "ROP 1.1 ‚Äì Responsabiliza√ß√£o pela Qualidade",
                audioFile: null,
                questions: []
            }
        }
    };
    console.log('‚ö†Ô∏è Usando dados b√°sicos ROPs');
}

// Carregar automaticamente
loadROPsData();
'''
    
    # Salvar arquivo base
    with open('rops-data-base.js', 'w', encoding='utf-8') as f:
        f.write(base_content)
    
    print("‚úÖ Arquivo base criado: rops-data-base.js")
    print("üìä Tamanho: ~2KB (vs 6.8MB original)")
    
    # Extrair cada macro √°rea
    for i, (key, comment) in enumerate(macro_areas, 1):
        print(f"\nüìù Extraindo macro √°rea {i}: {key}")
        
        # Padr√£o para encontrar a macro √°rea
        pattern = rf'// ==================== {re.escape(comment)} ====================\s*\n\s*"{key}":\s*\{{(.*?)\s*\}}'
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            macro_content = match.group(1)
            
            # Criar arquivo da macro √°rea
            file_content = f'''// {comment}
// Arquivo: rops-{key.replace('-', '_')}.js

ropsData['{key}'] = {{{macro_content}
}};

console.log('‚úÖ {comment} carregada');
'''
            
            filename = f'rops-{key.replace("-", "_")}.js'
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(file_content)
            
            file_size = len(file_content.encode('utf-8')) / 1024  # KB
            print(f"   ‚úÖ {filename}: {file_size:.1f}KB")
        else:
            print(f"   ‚ùå N√£o encontrada: {key}")
    
    print("\n" + "=" * 70)
    print("‚úÖ DIVIS√ÉO CONCLU√çDA!")
    print("\nüìä RESULTADO:")
    print("‚Ä¢ Arquivo original: 6.8MB")
    print("‚Ä¢ Arquivo base: ~2KB")
    print("‚Ä¢ 6 arquivos de macro √°reas: ~1MB cada")
    print("\nüéØ Carregamento ser√° MUITO mais r√°pido!")

if __name__ == "__main__":
    split_rops_data()

